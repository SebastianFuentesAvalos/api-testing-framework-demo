{
  "info": {
    "name": "User API Tests",
    "description": "Comprehensive test suite for the User API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "randomName",
      "value": ""
    },
    {
      "key": "randomEmail",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Health check returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is less than 200ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              "",
              "pm.test('Response contains status healthy', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('healthy');",
              "});",
              "",
              "pm.test('Response contains required fields', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData).to.have.property('timestamp');",
              "    pm.expect(jsonData).to.have.property('uptime');",
              "    pm.expect(jsonData).to.have.property('version');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "Get All Users",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is less than 500ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});",
              "",
              "pm.test('Response contains users array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('users');",
              "    pm.expect(jsonData.users).to.be.an('array');",
              "});",
              "",
              "pm.test('Response contains pagination info', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total');",
              "    pm.expect(jsonData).to.have.property('page');",
              "    pm.expect(jsonData).to.have.property('totalPages');",
              "});",
              "",
              "pm.test('Users have required fields', function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.users && jsonData.users.length > 0) {",
              "        const user = jsonData.users[0];",
              "        pm.expect(user).to.have.property('id');",
              "        pm.expect(user).to.have.property('name');",
              "        pm.expect(user).to.have.property('email');",
              "        pm.expect(user).to.have.property('role');",
              "    }",
              "});",
              "",
              "// Store first user ID for subsequent tests",
              "const responseJson = pm.response.json();",
              "if (responseJson.users && responseJson.users.length > 0) {",
              "    pm.collectionVariables.set('userId', responseJson.users[0].id);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      }
    },
    {
      "name": "Create New User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate random test data",
              "pm.collectionVariables.set('randomName', pm.variables.replaceIn('{{$randomFirstName}} {{$randomLastName}}'));",
              "pm.collectionVariables.set('randomEmail', pm.variables.replaceIn('{{$randomEmail}}'));"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response time is less than 500ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});",
              "",
              "pm.test('User created with correct data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get('randomName'));",
              "    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('randomEmail'));",
              "    pm.expect(jsonData).to.have.property('createdAt');",
              "});",
              "",
              "// Store created user ID",
              "const responseJson = pm.response.json();",
              "pm.collectionVariables.set('createdUserId', responseJson.id);"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"{{randomName}}\",\n  \"email\": \"{{randomEmail}}\",\n  \"age\": 28,\n  \"role\": \"user\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      }
    },
    {
      "name": "Get User by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is less than 300ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(300);",
              "});",
              "",
              "pm.test('User data is correct', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData.id).to.be.a('number');",
              "});",
              "",
              "pm.test('Email format is valid', function () {",
              "    const jsonData = pm.response.json();",
              "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
              "    pm.expect(jsonData.email).to.match(emailRegex);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      }
    },
    {
      "name": "Update User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('User updated successfully', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('updatedAt');",
              "    pm.expect(jsonData.age).to.eql(30);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"age\": 30\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      }
    },
    {
      "name": "Delete User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test('Response time is less than 300ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(300);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{createdUserId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{createdUserId}}"]
        }
      }
    },
    {
      "name": "Test Error Handling - User Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Error message is present', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.eql('User not found');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/999999",
          "host": ["{{baseUrl}}"],
          "path": ["users", "999999"]
        }
      }
    },
    {
      "name": "Test Validation - Invalid Email",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Validation error is returned', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.eql('Validation failed');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"invalid-email\",\n  \"age\": 25\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      }
    }
  ]
}