name: API Testing Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 8 * * *'

jobs:
  api-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g newman newman-reporter-html

      - name: Create reports directory
        run: mkdir -p reports

      - name: Start API server in background
        run: |
          npm start &
          echo $! > api.pid
          sleep 15  # Aumentar tiempo de espera
        
      - name: Wait for API to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Run API Health Check
        run: |
          curl -f http://localhost:3000/health || exit 1

      - name: Execute API Tests
        run: |
          newman run collections/user-api-tests.postman_collection.json \
            -e environments/dev.postman_environment.json \
            --reporters cli,html,json \
            --reporter-html-export reports/api-test-report-node${{ matrix.node-version }}.html \
            --reporter-json-export reports/api-test-results-node${{ matrix.node-version }}.json \
            --timeout-request 10000 \
            --delay-request 100

      - name: Run Security Tests
        run: |
          newman run collections/security-tests.postman_collection.json \
            -e environments/dev.postman_environment.json \
            --reporters cli,html \
            --reporter-html-export reports/security-test-report-node${{ matrix.node-version }}.html \
            --timeout-request 10000

      - name: Performance Testing
        run: |
          newman run collections/user-api-tests.postman_collection.json \
            -e environments/dev.postman_environment.json \
            --iteration-count 10 \
            --reporters cli,json \
            --reporter-json-export reports/performance-report-node${{ matrix.node-version }}.json \
            --timeout-request 10000

      - name: Analyze Performance Results
        if: always()
        run: |
          if [ -f reports/performance-report-node${{ matrix.node-version }}.json ]; then
            node scripts/analyze-results.js reports/performance-report-node${{ matrix.node-version }}.json
          else
            echo "Performance report not found, skipping analysis"
          fi

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-node${{ matrix.node-version }}
          path: reports/
          retention-days: 30

      - name: Stop API server
        if: always()
        run: |
          if [ -f api.pid ]; then
            kill $(cat api.pid) || true
            rm api.pid
          fi
          # También matar por puerto como respaldo
          lsof -ti:3000 | xargs kill -9 || true

      - name: Comment PR with Test Results
        if: github.event_name == 'pull_request' && matrix.node-version == '18'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './reports/api-test-results-node18.json';
            
            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const stats = results.run.stats;
              
              const comment = `## 🧪 API Test Results
              
              | Metric | Value |
              |--------|-------|
              | ✅ Tests Passed | ${stats.tests.total - stats.tests.failed}/${stats.tests.total} |
              | ❌ Tests Failed | ${stats.tests.failed} |
              | 🚀 Requests | ${stats.requests.total} |
              | ⚡ Avg Response Time | ${Math.round(results.run.timings?.responseAverage || 0)}ms |
              
              ${stats.tests.failed > 0 ? '⚠️ Some tests failed. Please check the detailed reports.' : '🎉 All tests passed!'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  deploy-reports:
    needs: api-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download test reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports-node18
          path: reports/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          destination_dir: test-reports